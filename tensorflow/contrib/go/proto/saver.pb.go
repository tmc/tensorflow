// Code generated by protoc-gen-go.
// source: tensorflow/core/protobuf/saver.proto
// DO NOT EDIT!

package tensorflow

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Protocol buffer representing the configuration of a SaveRestoreHelper.
type SaverDef struct {
	// The name of the tensor in which to specify the filename when saving or
	// restoring a model checkpoint.
	FilenameTensorName string `protobuf:"bytes,1,opt,name=filename_tensor_name,json=filenameTensorName" json:"filename_tensor_name,omitempty"`
	// The operation to run when saving a model checkpoint.
	SaveTensorName string `protobuf:"bytes,2,opt,name=save_tensor_name,json=saveTensorName" json:"save_tensor_name,omitempty"`
	// The operation to run when restoring a model checkpoint.
	RestoreOpName string `protobuf:"bytes,3,opt,name=restore_op_name,json=restoreOpName" json:"restore_op_name,omitempty"`
	// Maximum number of checkpoints to keep.  If 0, no checkpoints are deleted.
	MaxToKeep int32 `protobuf:"varint,4,opt,name=max_to_keep,json=maxToKeep" json:"max_to_keep,omitempty"`
	// Shard the save files, one per device that has Variable nodes.
	Sharded bool `protobuf:"varint,5,opt,name=sharded" json:"sharded,omitempty"`
	// How often to keep an additional checkpoint. If not specified, only the last
	// "max_to_keep" checkpoints are kept; if specified, in addition to keeping
	// the last "max_to_keep" checkpoints, an additional checkpoint will be kept
	// for every n hours of training.
	KeepCheckpointEveryNHours float32 `protobuf:"fixed32,6,opt,name=keep_checkpoint_every_n_hours,json=keepCheckpointEveryNHours" json:"keep_checkpoint_every_n_hours,omitempty"`
}

func (m *SaverDef) Reset()                    { *m = SaverDef{} }
func (m *SaverDef) String() string            { return proto.CompactTextString(m) }
func (*SaverDef) ProtoMessage()               {}
func (*SaverDef) Descriptor() ([]byte, []int) { return fileDescriptor17, []int{0} }

func init() {
	proto.RegisterType((*SaverDef)(nil), "tensorflow.SaverDef")
}

var fileDescriptor17 = []byte{
	// 267 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x54, 0xd0, 0xcd, 0x4a, 0xc3, 0x40,
	0x14, 0x05, 0x60, 0x12, 0x6d, 0x6d, 0x6f, 0xf1, 0x87, 0xd1, 0x45, 0x5c, 0x28, 0x22, 0x45, 0xba,
	0x4a, 0x04, 0x5f, 0x40, 0xaa, 0x82, 0x20, 0xd4, 0x12, 0xbb, 0x1f, 0xd2, 0xf4, 0xc6, 0x84, 0xa6,
	0xb9, 0xc3, 0xcc, 0xc4, 0x9f, 0x57, 0xf0, 0xa9, 0x9d, 0x3b, 0xb5, 0x56, 0x77, 0x33, 0xe7, 0x7c,
	0x09, 0xc9, 0x81, 0xa1, 0xc5, 0xc6, 0x90, 0x2e, 0x6a, 0x7a, 0x4f, 0x72, 0xd2, 0x98, 0x28, 0x4d,
	0x96, 0xe6, 0x6d, 0x91, 0x98, 0xec, 0x0d, 0x75, 0xec, 0xaf, 0x02, 0xb6, 0xea, 0xf2, 0x2b, 0x84,
	0xde, 0x0b, 0x77, 0xf7, 0x58, 0x88, 0x6b, 0x38, 0x29, 0xaa, 0x1a, 0x9b, 0x6c, 0x85, 0x72, 0x6d,
	0x24, 0x9f, 0xa3, 0xe0, 0x22, 0x18, 0xf5, 0x53, 0xb1, 0xe9, 0x66, 0xbe, 0x9a, 0xb8, 0x93, 0x18,
	0xc1, 0x11, 0xbf, 0xf9, 0x9f, 0x0e, 0xbd, 0x3e, 0xe0, 0xfc, 0x8f, 0xbc, 0x82, 0x43, 0x8d, 0xc6,
	0xba, 0x8f, 0x92, 0xa4, 0xd6, 0x70, 0xc7, 0xc3, 0xfd, 0x9f, 0xf8, 0x59, 0x79, 0x77, 0x0e, 0x83,
	0x55, 0xf6, 0x21, 0x2d, 0xc9, 0x25, 0xa2, 0x8a, 0x76, 0x9d, 0xe9, 0xa4, 0x7d, 0x17, 0xcd, 0xe8,
	0xc9, 0x05, 0x22, 0x82, 0x3d, 0x53, 0x66, 0x7a, 0x81, 0x8b, 0xa8, 0xe3, 0xba, 0x5e, 0xba, 0xb9,
	0x8a, 0x5b, 0x38, 0xe3, 0x47, 0x64, 0x5e, 0x62, 0xbe, 0x54, 0x54, 0x35, 0x56, 0xa2, 0xfb, 0xb1,
	0x4f, 0xd9, 0xc8, 0x92, 0x5a, 0x6d, 0xa2, 0xae, 0xf3, 0x61, 0x7a, 0xca, 0xe8, 0xee, 0xd7, 0x3c,
	0x30, 0x99, 0x3c, 0x32, 0x18, 0x0f, 0xe1, 0x98, 0xf4, 0x6b, 0xbc, 0x9d, 0x27, 0x6e, 0x6d, 0x55,
	0x8f, 0x07, 0x7e, 0xa0, 0x29, 0x6f, 0x67, 0xa6, 0xc1, 0xbc, 0xeb, 0x57, 0xbc, 0xf9, 0x0e, 0x00,
	0x00, 0xff, 0xff, 0xd6, 0x97, 0x3c, 0xd1, 0x6d, 0x01, 0x00, 0x00,
}
